[{"C:\\Users\\Buts\\Desktop\\port\\Repair Management\\frontend\\src\\index.js":"1","C:\\Users\\Buts\\Desktop\\port\\Repair Management\\frontend\\src\\routes.js":"2","C:\\Users\\Buts\\Desktop\\port\\Repair Management\\frontend\\src\\pages\\login\\index.js":"3","C:\\Users\\Buts\\Desktop\\port\\Repair Management\\frontend\\src\\pages\\register\\index.js":"4","C:\\Users\\Buts\\Desktop\\port\\Repair Management\\frontend\\src\\pages\\repair\\index.js":"5","C:\\Users\\Buts\\Desktop\\port\\Repair Management\\frontend\\src\\App.js":"6","C:\\Users\\Buts\\Desktop\\port\\Repair Management\\frontend\\src\\services\\api.js":"7","C:\\Users\\Buts\\Desktop\\port\\Repair Management\\frontend\\src\\components\\TopNav.js":"8","C:\\Users\\Buts\\Desktop\\port\\Repair Management\\frontend\\src\\reportWebVitals.js":"9","C:\\Users\\Buts\\Desktop\\port\\Repair Management\\frontend\\src\\pages\\repairItem\\index.js":"10","C:\\Users\\Buts\\Desktop\\port\\Repair Management\\frontend\\src\\pages\\repair\\components\\RepairCard.js":"11","C:\\Users\\Buts\\Desktop\\port\\Repair Management\\frontend\\src\\session-context.js":"12","C:\\Users\\Buts\\Desktop\\port\\Repair Management\\frontend\\src\\pages\\myRequests\\index.js":"13","C:\\Users\\Buts\\Desktop\\port\\Repair Management\\frontend\\src\\pages\\myRequests\\components\\RequestRow.js":"14","C:\\Users\\Buts\\Desktop\\port\\Repair Management\\frontend\\src\\pages\\myRepairs\\components\\RequestRow.js":"15","C:\\Users\\Buts\\Desktop\\port\\Repair Management\\frontend\\src\\pages\\myRepairs\\index.js":"16","C:\\Users\\Buts\\Desktop\\port\\Repair Management\\frontend\\src\\pages\\myRequests\\components\\RequestModal.js":"17","C:\\Users\\Buts\\Desktop\\port\\Repair Management\\frontend\\src\\pages\\repairItem\\Components\\HistoryRow.js":"18","C:\\Users\\Buts\\Desktop\\port\\Repair Management\\frontend\\src\\pages\\myRepairs\\components\\Alert.js":"19"},{"size":461,"mtime":1606838660535,"results":"20","hashOfConfig":"21"},{"size":1644,"mtime":1607840152276,"results":"22","hashOfConfig":"21"},{"size":4305,"mtime":1607619000584,"results":"23","hashOfConfig":"21"},{"size":5687,"mtime":1607315704183,"results":"24","hashOfConfig":"21"},{"size":1705,"mtime":1607619119655,"results":"25","hashOfConfig":"21"},{"size":149,"mtime":1606841822039,"results":"26","hashOfConfig":"21"},{"size":167,"mtime":1607446518674,"results":"27","hashOfConfig":"21"},{"size":1977,"mtime":1607765583271,"results":"28","hashOfConfig":"21"},{"size":362,"mtime":499162500000,"results":"29","hashOfConfig":"21"},{"size":11120,"mtime":1607779392399,"results":"30","hashOfConfig":"21"},{"size":1857,"mtime":1607517276137,"results":"31","hashOfConfig":"21"},{"size":1158,"mtime":1607312635116,"results":"32","hashOfConfig":"21"},{"size":6319,"mtime":1607772694399,"results":"33","hashOfConfig":"21"},{"size":1257,"mtime":1607844648016,"results":"34","hashOfConfig":"21"},{"size":1146,"mtime":1607870322667,"results":"35","hashOfConfig":"21"},{"size":3272,"mtime":1607870262648,"results":"36","hashOfConfig":"21"},{"size":4879,"mtime":1607840332558,"results":"37","hashOfConfig":"21"},{"size":745,"mtime":1607776949005,"results":"38","hashOfConfig":"21"},{"size":536,"mtime":1607869951533,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1m3p4pi",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"47"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"47"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Buts\\Desktop\\port\\Repair Management\\frontend\\src\\index.js",[],["86","87"],"C:\\Users\\Buts\\Desktop\\port\\Repair Management\\frontend\\src\\routes.js",[],"C:\\Users\\Buts\\Desktop\\port\\Repair Management\\frontend\\src\\pages\\login\\index.js",[],["88","89"],"C:\\Users\\Buts\\Desktop\\port\\Repair Management\\frontend\\src\\pages\\register\\index.js",["90"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { SessionContext } from \"../../session-context\";\r\nimport { Button, Form, Row, Col } from \"react-bootstrap\";\r\nimport api from \"../../services/api\";\r\n\r\nconst RegisterPage = ({ history }) => {\r\n  const { isLoggedIn } = useContext(SessionContext);\r\n\r\n  useEffect(() => {\r\n    if (isLoggedIn) history.push(\"/\");\r\n    // eslint-disable-next-line\r\n  }, []);\r\n  const [register, setRegister] = useState({\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    password: \"\",\r\n    email: \"\",\r\n    type: \"\",\r\n    hasError: false,\r\n    errorMessage: \"\",\r\n    success: \"\",\r\n    link: \"\",\r\n  });\r\n  const handleChange = (event) => {\r\n    const { value, name } = event.target;\r\n    setRegister({ ...register, [name]: value });\r\n  };\r\n  const handleLogin = () => {\r\n    history.push(\"/login\");\r\n  };\r\n  const handleRegister = async (event) => {\r\n    event.preventDefault();\r\n    try {\r\n      const { firstName, lastName, password, email, type } = register;\r\n      if (!firstName || !lastName || !password || !email || !type) {\r\n        return setRegister({\r\n          ...register,\r\n          hasError: true,\r\n          errorMessage: \"Missing required infromation!\",\r\n          success: false,\r\n          link: \"\",\r\n        });\r\n      }\r\n\r\n      const response = await api.post(\"/user/create\", {\r\n        firstName,\r\n        lastName,\r\n        email,\r\n        password,\r\n        type,\r\n      });\r\n      setRegister({\r\n        ...register,\r\n        hasError: false,\r\n        errorMessage: \"\",\r\n        success: true,\r\n        link: \"\",\r\n      });\r\n      setTimeout(() => history.push(\"/login\"), 2000);\r\n    } catch (error) {\r\n      console.log(error.response.data.message);\r\n      setRegister({\r\n        ...register,\r\n        hasError: true,\r\n        errorMessage: \"Email already exists!\",\r\n        link: \"Sign up\",\r\n        success: false,\r\n      });\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <Row className=\"register justify-content-around align-items-center h-100\">\r\n        <Col\r\n          md={12}\r\n          lg={6}\r\n          className=\"order-2 order-lg-1 border rounded p-5 shadow\"\r\n        >\r\n          <Form onSubmit={handleRegister} className=\"mx-auto\">\r\n            <Row>\r\n              <Col>\r\n                <Form.Group inline=\"true\" controlId=\"firstName\">\r\n                  <Form.Control\r\n                    onChange={handleChange}\r\n                    value={register.firstName}\r\n                    required\r\n                    name=\"firstName\"\r\n                    type=\"text\"\r\n                    placeholder=\"Firstname\"\r\n                  />\r\n                </Form.Group>\r\n              </Col>\r\n              <Col>\r\n                <Form.Group inline=\"true\" controlId=\"lastName\">\r\n                  <Form.Control\r\n                    onChange={handleChange}\r\n                    value={register.lastName}\r\n                    required\r\n                    name=\"lastName\"\r\n                    type=\"text\"\r\n                    placeholder=\"Lastname\"\r\n                  />\r\n                </Form.Group>\r\n              </Col>\r\n            </Row>\r\n            <Form.Group inline=\"true\" controlId=\"email\">\r\n              <Form.Control\r\n                required\r\n                onChange={handleChange}\r\n                value={register.email}\r\n                name=\"email\"\r\n                type=\"email\"\r\n                placeholder=\"Email\"\r\n              />\r\n            </Form.Group>\r\n            <Form.Group inline=\"true\" controlId=\"password\">\r\n              <Form.Control\r\n                required\r\n                onChange={handleChange}\r\n                value={register.password}\r\n                name=\"password\"\r\n                type=\"password\"\r\n                placeholder=\"Password\"\r\n              />\r\n            </Form.Group>\r\n            <Form.Group controlId=\"type\" className=\"text-center\">\r\n              <select\r\n                className=\"form-control border-bottom\"\r\n                name=\"type\"\r\n                value={register.type}\r\n                onChange={handleChange}\r\n                required\r\n              >\r\n                <option value=\"\" default>\r\n                  Please select Account type...\r\n                </option>\r\n                <option value=\"USER\">User</option>\r\n                <option value=\"TECH\">Technician</option>\r\n              </select>\r\n            </Form.Group>\r\n            <Form.Group className=\"text-center w-50 mx-auto\">\r\n              <Button\r\n                variant=\"warning\"\r\n                type=\"submit\"\r\n                className=\"btn-block w-30 rounded-pill\"\r\n              >\r\n                Sign up\r\n              </Button>\r\n              <Button\r\n                variant=\"secondary\"\r\n                className=\"btn-block w-30 rounded-pill\"\r\n                onClick={handleLogin}\r\n              >\r\n                Sign in\r\n              </Button>\r\n            </Form.Group>\r\n\r\n            <Form.Text className=\"status font-weight-bold position-absolute text-danger text-center\">\r\n              {register.hasError ? register.errorMessage : \"\"}\r\n              {register.link ? <a href=\"/login\"> Sign in instead?</a> : \"\"}\r\n            </Form.Text>\r\n            <Form.Text className=\"status font-weight-bold position-absolute text-success text-center\">\r\n              {register.success\r\n                ? \"Success! Redirecting to Sign in page...\"\r\n                : \"\"}\r\n            </Form.Text>\r\n          </Form>\r\n        </Col>\r\n        <Col md={12} lg={6} className=\"text-center order-1 order-lg-2\">\r\n          <h1>Sign up</h1>\r\n          <p>Please register first to continue.</p>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\nexport default RegisterPage;\r\n",["91","92"],"C:\\Users\\Buts\\Desktop\\port\\Repair Management\\frontend\\src\\pages\\repair\\index.js",[],"C:\\Users\\Buts\\Desktop\\port\\Repair Management\\frontend\\src\\App.js",[],"C:\\Users\\Buts\\Desktop\\port\\Repair Management\\frontend\\src\\services\\api.js",[],["93","94"],"C:\\Users\\Buts\\Desktop\\port\\Repair Management\\frontend\\src\\components\\TopNav.js",["95"],"import React, { useContext, useEffect } from \"react\";\r\nimport { Navbar, Nav, NavDropdown, Container } from \"react-bootstrap\";\r\nimport { SessionContext } from \"../session-context\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst TopNav = () => {\r\n  const history = useHistory();\r\n  //Parse Object stored as json\r\n  const user = JSON.parse(localStorage.getItem(\"user\"));\r\n  //Get firstname only\r\n  const name = user ? user.firstName.split(/[ ,]+/).filter(Boolean)[0] : \"\";\r\n\r\n  const { isLoggedIn, setIsLoggedIn } = useContext(SessionContext);\r\n  const signoutHandler = () => {\r\n    localStorage.removeItem(\"token\");\r\n    localStorage.removeItem(\"user\");\r\n    setIsLoggedIn(false);\r\n    history.push(\"/login\");\r\n  };\r\n\r\n  return isLoggedIn ? (\r\n    <>\r\n      <Navbar variant=\"dark\" expand=\"lg\" className=\"text-white\">\r\n        <Container>\r\n          <Navbar.Brand href=\"/\">Repair</Navbar.Brand>\r\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n          <Navbar.Collapse id=\"basic-navbar-nav\">\r\n            <Nav className=\"ml-auto\">\r\n              <Nav.Link className=\"text-white\" href=\"/\">\r\n                Queue\r\n              </Nav.Link>\r\n              <Nav.Link className=\"text-white\" href=\"/user/requests\">\r\n                Requests\r\n              </Nav.Link>\r\n              {user.type !== \"USER\" ? (\r\n                <Nav.Link className=\"text-white\" href=\"/user/repairs\">\r\n                  Repairs\r\n                </Nav.Link>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n\r\n              <NavDropdown title={`Hi ${name}!`} id=\"topnav-dropdown\">\r\n                <NavDropdown.Item href=\"#action/3.1\">Account</NavDropdown.Item>\r\n                <NavDropdown.Item onClick={signoutHandler}>\r\n                  Sign out\r\n                </NavDropdown.Item>\r\n              </NavDropdown>\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Container>\r\n      </Navbar>\r\n    </>\r\n  ) : (\r\n    \"\"\r\n  );\r\n};\r\n\r\nexport default TopNav;\r\n","C:\\Users\\Buts\\Desktop\\port\\Repair Management\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\Buts\\Desktop\\port\\Repair Management\\frontend\\src\\pages\\repairItem\\index.js",["96","97"],"import React, { useState, useContext, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { SessionContext } from \"../../session-context\";\r\nimport {\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Badge,\r\n  Button,\r\n  Form,\r\n  Spinner,\r\n} from \"react-bootstrap\";\r\nimport api from \"../../services/api\";\r\nimport moment from \"moment\";\r\nimport HistoryRow from \"./Components/HistoryRow\";\r\nimport \"./index.css\";\r\nconst RequestItemPage = ({ history }) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  const user = JSON.parse(localStorage.getItem(\"user\"));\r\n  const { isLoggedIn, statusColor } = useContext(SessionContext);\r\n  const [repair, setRepair] = useState(null);\r\n  const [transactions, setTransactions] = useState(null);\r\n  const { id } = useParams();\r\n  const [state, setState] = useState({\r\n    status: \"\",\r\n    note: \"\",\r\n    repairId: \"\",\r\n    success: false,\r\n    hasError: false,\r\n    errorMessage: \"\",\r\n  });\r\n  const handleChange = (event) => {\r\n    const { value, name } = event.target;\r\n    setState({ ...state, [name]: value });\r\n  };\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    const { status, note } = state;\r\n    if (!status || !note) return alert(\"Missing information!\");\r\n    try {\r\n      setState({\r\n        ...state,\r\n        success: true,\r\n        hasError: false,\r\n        errorMessage: \"\",\r\n      });\r\n      if (status === \"DELETE\") {\r\n        return api\r\n          .delete(\"/requests/delete/\" + repair._id, {\r\n            headers: { \"auth-token\": token },\r\n          })\r\n          .then((res) => history.push(\"/\"));\r\n      }\r\n\r\n      api\r\n        .put(\r\n          \"/requests/\" + repair._id,\r\n          { status, note },\r\n          { headers: { \"auth-token\": token } }\r\n        )\r\n        .then((data) => {\r\n          getRepair();\r\n          setState({\r\n            status: \"\",\r\n            note: \"\",\r\n            repairId: \"\",\r\n            success: false,\r\n            hasError: false,\r\n            errorMessage: \"\",\r\n          });\r\n        });\r\n    } catch (error) {\r\n      setState({\r\n        ...state,\r\n        hasError: true,\r\n        errorMessage: \"Missing Information!\",\r\n        success: false,\r\n      });\r\n    }\r\n  };\r\n  const getRepair = async () => {\r\n    try {\r\n      const response = await api.get(\"/requests/\" + id, {\r\n        headers: { \"auth-token\": token },\r\n      });\r\n      console.log(response.data);\r\n      setRepair(response.data.repair);\r\n      const { history } = response.data;\r\n      if (history) return setTransactions(history.reverse());\r\n      setTransactions(response.data.history);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    if (!isLoggedIn) return history.push(\"/login\");\r\n    getRepair();\r\n  }, []);\r\n\r\n  const newDate = (date) => {\r\n    const original = moment(date);\r\n    return original.format(\"MMM DD YYYY, h:mm:ss a\");\r\n  };\r\n  const options = (customer, status) => {\r\n    if (user.type === \"USER\" && customer === user._id) {\r\n      return (\r\n        <>\r\n          <option\r\n            disabled={status === \"OUTGOING\" || status === \"COMPLETED\"}\r\n            value=\"CANCELLED\"\r\n          >\r\n            CANCEL\r\n          </option>\r\n          <option\r\n            disabled={status === \"OUTGOING\" || status === \"COMPLETED\"}\r\n            value=\"DELETE\"\r\n          >\r\n            DELETE\r\n          </option>\r\n        </>\r\n      );\r\n    }\r\n    if (user.type === \"TECH\") {\r\n      return (\r\n        <>\r\n          <option\r\n            className={status !== \"INCOMING\" ? \"hidden\" : \"\"}\r\n            value=\"RECEIVED\"\r\n          >\r\n            RECEIVED\r\n          </option>\r\n          <option\r\n            className={\r\n              status !== \"RECEIVED\" && status !== \"ON HOLD\" ? \"hidden\" : \"\"\r\n            }\r\n            value=\"ONGOING\"\r\n          >\r\n            ONGOING\r\n          </option>\r\n          <option\r\n            className={status !== \"ONGOING\" ? \"hidden\" : \"\"}\r\n            value=\"ON HOLD\"\r\n          >\r\n            ON HOLD\r\n          </option>\r\n          <option\r\n            className={\r\n              status !== \"ON HOLD\" && status !== \"ONGOING\" ? \"hidden\" : \"\"\r\n            }\r\n            value=\"OUTGOING\"\r\n          >\r\n            OUTGOING\r\n          </option>\r\n          <option\r\n            className={status !== \"OUTGOING\" ? \"hidden\" : \"\"}\r\n            value=\"COMPLETED\"\r\n          >\r\n            COMPLETED\r\n          </option>\r\n        </>\r\n      );\r\n    }\r\n    return (\r\n      <>\r\n        <option value=\"RECEIVED\">RECEIVED</option>\r\n        <option value=\"ONGOING\">ONGOING</option>\r\n        <option value=\"ON HOLD\">ON HOLD</option>\r\n        <option value=\"OUTGOING\">OUTGOING</option>\r\n        <option value=\"COMPLETED\">COMPLETED</option>\r\n        <option value=\"CANCELLED\">CANCEL</option>\r\n        <option value=\"DELETE\">DELETE</option>\r\n      </>\r\n    );\r\n  };\r\n  return !repair ? null : (\r\n    <>\r\n      <Row className=\"repair-item-row text-center justify-content-between align-items-stretch  h-100\">\r\n        <Col md={12} lg={6}>\r\n          <div className=\"repair-item-info d-flex flex-column\">\r\n            <div className=\"product-img-repairItem d-flex justify-content-center align-items-center mw-100\">\r\n              <img className=\"mh-100 mw-100\" src={repair.image_url} />\r\n            </div>\r\n            <h4>{repair.device}</h4>\r\n\r\n            <Container className=\"details-body-repairItem text-left\">\r\n              <div className=\"text-left\">\r\n                <Badge variant={statusColor(repair.status)}>\r\n                  {repair.status}\r\n                </Badge>\r\n                <Badge\r\n                  className=\"ml-1\"\r\n                  variant={repair.expedite ? \"danger\" : \"primary\"}\r\n                >\r\n                  {repair.expedite ? \"EXPEDITE\" : \"REGULAR\"}\r\n                </Badge>\r\n              </div>\r\n              <div className=\"d-flex flex-column flex-sm-row justify-content-between mh-100\">\r\n                <ul className=\"mb-0\">\r\n                  <li>Created</li>\r\n                  <li>{newDate(repair.dateCreated)}</li>\r\n                  <li>Requestor</li>\r\n                  <li className=\"li-container position-relative\">\r\n                    {repair.customer.firstName} {repair.customer.lastName}\r\n                    <a\r\n                      className=\"email\"\r\n                      href={`mailto:${repair.customer.email}`}\r\n                    >\r\n                      {repair.customer.email}\r\n                    </a>\r\n                  </li>\r\n                </ul>\r\n                <ul className=\"mb-0\">\r\n                  <li>Updated</li>\r\n                  <li>\r\n                    {repair.dateCreated !== repair.lastUpdate\r\n                      ? newDate(repair.lastUpdate)\r\n                      : \"N/A\"}\r\n                  </li>\r\n                  <li>Last User</li>\r\n                  <li className=\"li-container position-relative\">\r\n                    {repair.user.firstName} {repair.user.lastName}\r\n                    <a className=\"email\" href={`mailto:${repair.user.email}`}>\r\n                      {repair.user.email}\r\n                    </a>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n              <ul className=\"issue-ul mb-0 flex-grow-1\">\r\n                <li>Issue/Description</li>\r\n                <li className=\"issue-repairItem\">{repair.issue}</li>\r\n              </ul>\r\n            </Container>\r\n          </div>\r\n        </Col>\r\n        <Col md={12} lg={6}>\r\n          <Container className=\"h-100\">\r\n            <Row className=\"transactions-row flex-column pt-0 mh-100\">\r\n              <Col className=\"flex-grow-0\">\r\n                <Form onSubmit={handleSubmit}>\r\n                  <Form.Group className=\"text-left\" controlId=\"status\">\r\n                    <Form.Control\r\n                      name=\"status\"\r\n                      value={state.status}\r\n                      className={`d-inline-block w-auto ${\r\n                        state.status === \"DELETE\" ? \"border border-danger\" : \"\"\r\n                      }`}\r\n                      as=\"select\"\r\n                      onChange={handleChange}\r\n                      required\r\n                      disabled={\r\n                        user._id !== repair.customer._id && user.type === \"USER\"\r\n                      }\r\n                    >\r\n                      <option value=\"\" default>\r\n                        Update Status:\r\n                      </option>\r\n                      {options(repair.customer._id, repair.status)}\r\n                    </Form.Control>\r\n                  </Form.Group>\r\n                  <Form.Group className=\"\" controlId=\"note\">\r\n                    <Form.Control\r\n                      placeholder=\"Note:\"\r\n                      as=\"textarea\"\r\n                      name=\"note\"\r\n                      value={state.note}\r\n                      rows={3}\r\n                      onChange={handleChange}\r\n                      disabled={!state.status || state.success}\r\n                      required\r\n                    />\r\n                    <div className=\"d-flex justify-content-end mt-2\">\r\n                      {state.success ? <Spinner animation=\"border\" /> : \"\"}\r\n                      <Button\r\n                        type=\"submit\"\r\n                        className=\"mx-1 w-25\"\r\n                        disabled={!state.status || !state.note || state.success}\r\n                      >\r\n                        Submit\r\n                      </Button>\r\n                      <Button\r\n                        variant=\"danger\"\r\n                        className=\"mx-2 w-25\"\r\n                        disabled={!state.status || !state.note || state.success}\r\n                      >\r\n                        Cancel\r\n                      </Button>\r\n                    </div>\r\n                  </Form.Group>\r\n                  <Form.Text className=\"status font-weight-bold position-absolute text-danger text-center\">\r\n                    {state.hasError ? state.errorMessage : \"\"}\r\n                  </Form.Text>\r\n                </Form>\r\n              </Col>\r\n              <Col className=\"col-table-repairItem flex-grow-1\">\r\n                {/* <h5>Previous Transactions</h5> */}\r\n                <div className=\"table-div-repairItem border table-responsive-sm\">\r\n                  <table className=\"table repairItem text-center\">\r\n                    <thead>\r\n                      <tr>\r\n                        <th>Date</th>\r\n                        <th>User</th>\r\n                        <th>Status</th>\r\n                        <th>Note</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      {transactions ? (\r\n                        transactions.map((data) => (\r\n                          <HistoryRow key={data._id} data={data} />\r\n                        ))\r\n                      ) : (\r\n                        <></>\r\n                      )}\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RequestItemPage;\r\n","C:\\Users\\Buts\\Desktop\\port\\Repair Management\\frontend\\src\\pages\\repair\\components\\RepairCard.js",["98","99"],"C:\\Users\\Buts\\Desktop\\port\\Repair Management\\frontend\\src\\session-context.js",[],"C:\\Users\\Buts\\Desktop\\port\\Repair Management\\frontend\\src\\pages\\myRequests\\index.js",["100"],"import React, { useContext, useEffect, useState, useMemo } from \"react\";\r\nimport { Row, Col, Button, Spinner } from \"react-bootstrap\";\r\nimport { MdAddToQueue } from \"react-icons/md\";\r\nimport api from \"../../services/api\";\r\nimport { SessionContext } from \"../../session-context\";\r\nimport RequestRow from \"./components/RequestRow\";\r\nimport RequestModal from \"./components/RequestModal\";\r\nimport \"./index.css\";\r\n\r\nconst MyRequestsPage = ({ history }) => {\r\n  const { isLoggedIn } = useContext(SessionContext);\r\n  const [show, setShow] = useState(false);\r\n  const [form, setForm] = useState({\r\n    device: \"\",\r\n    issue: \"\",\r\n    image: null,\r\n    expedite: \"No\",\r\n  });\r\n  const [requests, setRequests] = useState(null);\r\n  const [state, setState] = useState({\r\n    hasError: false,\r\n    errorMessage: \"\",\r\n    uploading: false,\r\n    loading: false,\r\n  });\r\n  const token = localStorage.getItem(\"token\");\r\n  const user = JSON.parse(localStorage.getItem(\"user\"));\r\n  useEffect(() => {\r\n    if (!isLoggedIn) return history.push(\"/login\");\r\n    getRepairs();\r\n  }, []);\r\n\r\n  const preview = useMemo(() => {\r\n    return form.image ? URL.createObjectURL(form.image) : null;\r\n  }, [form.image]);\r\n  const handleChange = (event) => {\r\n    const { value, name, files } = event.target;\r\n    if (files) return setForm({ ...form, [name]: files[0] });\r\n    setForm({ ...form, [name]: value });\r\n  };\r\n  const handleClick = (id) => {\r\n    history.push(\"/repairs/\" + id);\r\n  };\r\n  const handleSort = (event) => {\r\n    if (requests) {\r\n      const property = event.target.textContent.toLowerCase();\r\n      const compare = (a, b) => {\r\n        if (property === \"type\") {\r\n          return b.expedite - a.expedite;\r\n        }\r\n        if (property === \"update\") {\r\n          return new Date(b.lastUpdate) - new Date(a.lastUpdate);\r\n        }\r\n        if (a[property].toLowerCase() < b[property].toLowerCase()) return -1;\r\n        if (a[property].toLowerCase() > b[property].toLowerCase()) return 1;\r\n        return 0;\r\n      };\r\n      const sorted = [...requests].sort(compare);\r\n      setRequests([...sorted]);\r\n    }\r\n  };\r\n  const handleSubmit = async () => {\r\n    const repairData = new FormData();\r\n\r\n    try {\r\n      if (form.device && form.issue && form.image) {\r\n        repairData.append(\"device\", form.device);\r\n        repairData.append(\"customer\", user._id);\r\n        repairData.append(\"issue\", form.issue);\r\n        repairData.append(\"image\", form.image);\r\n        repairData.append(\"expedite\", form.expedite);\r\n        setState({\r\n          loading: false,\r\n          hasError: false,\r\n          uploading: true,\r\n          errorMessage: \"\",\r\n        });\r\n        api\r\n          .post(\"/requests/create\", repairData, {\r\n            headers: { \"auth-token\": token },\r\n          })\r\n          .then(\r\n            (value) => {\r\n              setState({\r\n                hasError: false,\r\n                errorMessage: \"\",\r\n                uploading: false,\r\n                loading: false,\r\n              });\r\n              getRepairs();\r\n              setShow(false);\r\n              setForm({ device: \"\", issue: \"\", image: null, expedite: \"No\" });\r\n            },\r\n            (error) => {\r\n              console.log(error);\r\n              setState({\r\n                loading: false,\r\n                uploading: false,\r\n                hasError: true,\r\n                errorMessage: \"Upload error!\",\r\n              });\r\n            }\r\n          );\r\n      } else {\r\n        setState({\r\n          loading: false,\r\n          uploading: false,\r\n          hasError: true,\r\n          errorMessage: \"Missing required information!\",\r\n        });\r\n      }\r\n    } catch (error) {\r\n      setState({\r\n        loading: false,\r\n        uploading: false,\r\n        hasError: true,\r\n        errorMessage: \"Server error!\",\r\n      });\r\n      console.log(error);\r\n    }\r\n  };\r\n  const handleHide = () => {\r\n    setState({\r\n      uploading: false,\r\n      hasError: false,\r\n      errorMessage: \"\",\r\n      loading: false,\r\n    });\r\n    setForm({ device: \"\", issue: \"\", image: null, expedite: \"No\" });\r\n    setShow(false);\r\n  };\r\n  const getRepairs = async () => {\r\n    setState({ ...state, loading: true });\r\n    try {\r\n      const response = await api.get(\"/user/requests/\", {\r\n        headers: { \"auth-token\": token },\r\n      });\r\n      setRequests([...response.data.repairs]);\r\n      setState({ ...state, loading: false });\r\n    } catch (error) {\r\n      setState({ ...state, loading: false });\r\n      console.log(error);\r\n    }\r\n  };\r\n  return (\r\n    <Row className=\"flex-column h-100\">\r\n      <Col className=\"flex-grow-0\">\r\n        <Button\r\n          onClick={() => setShow(true)}\r\n          className=\"new-request d-block ml-auto mb-2 rounded-pill\"\r\n        >\r\n          Create New <MdAddToQueue className=\"ml-1\" />\r\n        </Button>\r\n        <RequestModal\r\n          show={show}\r\n          onHide={handleHide}\r\n          handleChange={handleChange}\r\n          handleSubmit={handleSubmit}\r\n          state={state}\r\n          form={form}\r\n          preview={preview}\r\n        />\r\n      </Col>\r\n\r\n      <Col className=\"col-table-myRequests flex-grow-1\">\r\n        <div className=\"table-div-myRequests table-responsive-lg h-100\">\r\n          <table className=\"table myRequests table-hover text-center\">\r\n            <thead>\r\n              <tr onClick={handleSort}>\r\n                <th>Device</th>\r\n                <th>Issue</th>\r\n                <th>Type</th>\r\n                <th>Status</th>\r\n                <th>Update</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {!state.loading && requests ? (\r\n                requests.map((request) => (\r\n                  <RequestRow\r\n                    handleClick={handleClick}\r\n                    key={request._id}\r\n                    data={request}\r\n                  />\r\n                ))\r\n              ) : state.loading ? (\r\n                <tr>\r\n                  <td colSpan=\"5\">\r\n                    <Spinner animation=\"border\" />\r\n                  </td>\r\n                </tr>\r\n              ) : (\r\n                <tr>\r\n                  <td colSpan=\"5\">You have no requests.</td>\r\n                </tr>\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default MyRequestsPage;\r\n","C:\\Users\\Buts\\Desktop\\port\\Repair Management\\frontend\\src\\pages\\myRequests\\components\\RequestRow.js",["101","102","103"],"C:\\Users\\Buts\\Desktop\\port\\Repair Management\\frontend\\src\\pages\\myRepairs\\components\\RequestRow.js",["104","105","106"],"C:\\Users\\Buts\\Desktop\\port\\Repair Management\\frontend\\src\\pages\\myRepairs\\index.js",["107"],"C:\\Users\\Buts\\Desktop\\port\\Repair Management\\frontend\\src\\pages\\myRequests\\components\\RequestModal.js",[],"C:\\Users\\Buts\\Desktop\\port\\Repair Management\\frontend\\src\\pages\\repairItem\\Components\\HistoryRow.js",[],"C:\\Users\\Buts\\Desktop\\port\\Repair Management\\frontend\\src\\pages\\myRepairs\\components\\Alert.js",[],{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","replacedBy":"111"},{"ruleId":"108","replacedBy":"112"},{"ruleId":"110","replacedBy":"113"},{"ruleId":"114","severity":1,"message":"115","line":45,"column":13,"nodeType":"116","messageId":"117","endLine":45,"endColumn":21},{"ruleId":"108","replacedBy":"118"},{"ruleId":"110","replacedBy":"119"},{"ruleId":"108","replacedBy":"120"},{"ruleId":"110","replacedBy":"121"},{"ruleId":"114","severity":1,"message":"122","line":1,"column":29,"nodeType":"116","messageId":"117","endLine":1,"endColumn":38},{"ruleId":"123","severity":1,"message":"124","line":98,"column":6,"nodeType":"125","endLine":98,"endColumn":8,"suggestions":"126"},{"ruleId":"127","severity":1,"message":"128","line":181,"column":15,"nodeType":"129","endLine":181,"endColumn":71},{"ruleId":"114","severity":1,"message":"130","line":1,"column":17,"nodeType":"116","messageId":"117","endLine":1,"endColumn":25},{"ruleId":"114","severity":1,"message":"131","line":8,"column":9,"nodeType":"116","messageId":"117","endLine":8,"endColumn":16},{"ruleId":"123","severity":1,"message":"132","line":31,"column":6,"nodeType":"125","endLine":31,"endColumn":8,"suggestions":"133"},{"ruleId":"114","severity":1,"message":"130","line":1,"column":29,"nodeType":"116","messageId":"117","endLine":1,"endColumn":37},{"ruleId":"114","severity":1,"message":"134","line":2,"column":10,"nodeType":"116","messageId":"117","endLine":2,"endColumn":16},{"ruleId":"135","severity":1,"message":"136","line":16,"column":11,"nodeType":"129","endLine":16,"endColumn":73},{"ruleId":"114","severity":1,"message":"122","line":1,"column":29,"nodeType":"116","messageId":"117","endLine":1,"endColumn":38},{"ruleId":"114","severity":1,"message":"130","line":1,"column":40,"nodeType":"116","messageId":"117","endLine":1,"endColumn":48},{"ruleId":"127","severity":1,"message":"128","line":22,"column":9,"nodeType":"129","endLine":28,"endColumn":11},{"ruleId":"123","severity":1,"message":"137","line":20,"column":6,"nodeType":"125","endLine":20,"endColumn":8,"suggestions":"138"},"no-native-reassign",["139"],"no-negated-in-lhs",["140"],["139"],["140"],"no-unused-vars","'response' is assigned a value but never used.","Identifier","unusedVar",["139"],["140"],["139"],["140"],"'useEffect' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getRepair', 'history', and 'isLoggedIn'. Either include them or remove the dependency array.","ArrayExpression",["141"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useState' is defined but never used.","'history' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getRepairs', 'history', and 'isLoggedIn'. Either include them or remove the dependency array.",["142"],"'Button' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","React Hook useEffect has missing dependencies: 'getRepairs', 'history', 'isLoggedIn', and 'user.type'. Either include them or remove the dependency array.",["143"],"no-global-assign","no-unsafe-negation",{"desc":"144","fix":"145"},{"desc":"146","fix":"147"},{"desc":"148","fix":"149"},"Update the dependencies array to be: [getRepair, history, isLoggedIn]",{"range":"150","text":"151"},"Update the dependencies array to be: [getRepairs, history, isLoggedIn]",{"range":"152","text":"153"},"Update the dependencies array to be: [getRepairs, history, isLoggedIn, user.type]",{"range":"154","text":"155"},[2751,2753],"[getRepair, history, isLoggedIn]",[1060,1062],"[getRepairs, history, isLoggedIn]",[858,860],"[getRepairs, history, isLoggedIn, user.type]"]